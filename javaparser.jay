%{
import java.util.Vector;
class javaparser {
%}

%token ASSIGN
%token <String> BINARY
%token BOOL
%token CLASS
%token CHAR
$token COMMA
%token ELSE
%token IF
%token INTEGER
%token JNULL
%token NEW
%token RETURN
%token SEMICOLON
%token STRING
%token SUPER
%token THIS
%token <String> UNARY
%token WHILE
%token VOID
%token OPENCURLYBRACKET
%token CLOSECURLYBRACKET
%token OPENROUNDBRACKET
%token CLOSEROUNDBRACKET
%token <String> TEXT

%type <Stmt> Stmt ifthenstatement ifthenelsestatement whilestatement block emptystatement returnstatement StmtExprStmt
%type <Expr> This Super Unary Binary Integer Bool Char String Jnull Expr LocalOrFieldVar InstVar StmtExprExpr
%type <StmtExpr> Assign New MethodCall StmtExpr
%type <Class> S
%type <Vector> Field Method expressions statements Methods Fields  Parameters Parameter
%type <Type> Type

%%

S:  CLASS Type OPENCURLYBRACKET Fields Methods CLOSECURLYBRACKET {
      $$ = new Class($2, $4, $5);
      }

Field: Type TEXT SEMICOLON {
         Vector<Field> v = new Vector();
         v.add(new Field($1, $2));
         $$ = v;
}

Fields: Field Fields {
	    $1.insertElementAt($2, 0);
	    $$ = $1;
	}
	| Field { $$ = $1; }
	

Method: Type TEXT OPENROUNDBRACKET Parameters  CLOSEROUNDBRACKET block  {
	Vector<Method> v = new Vector();
	v.add(new Method($1, $2, new Parameter($4), $6));
	$$ = v;
}

Methods: Method Methods {
	   $1.insertElementAt($2, 0);
	   $$ = $1;
	 }
	 | Method { $$ = $1;}

Parameter: Type TEXT {
	   Vector<Field> v = new Vector();
	   v.add(new Field($1, $2));
	   $$ = v;
}

Parameters: Parameter COMMA Parameters {
	      $1.insertElementAt($3, 0);
	      $$ = $1;
	    }
	    | Field {
	      $$ = $1;
	    }

Stmt: ifthenstatement { $$ = $1;}
      | ifthenelsestatement { $$ = $1;}
      | whilestatement { $$ = $1;}
      | block { $$ = $1;}
      | emptystatement { $$ = $1;}
      | returnstatement { $$ = $1;}
      | StmtExprStmt { $$ = $1; }

ifthenstatement: IF OPENROUNDBRACKET Bool CLOSEROUNDBRACKET Stmt {
      $$ = new If($3, $5);
}

ifthenelsestatement: IF OPENROUNDBRACKET Bool CLOSEROUNDBRACKET Stmt ELSE Stmt {
      $$ = new If($3, $5, $7);
}

whilestatement: WHILE OPENROUNDBRACKET Bool CLOSEROUNDBRACKET Stmt {
      $$ = new While($3, $5);
}

block: OPENCURLYBRACKET CLOSECURLYBRACKET {
            $$ = new Block(new Vector());
      }
      | OPENCURLYBRACKET statements CLOSECURLYBRACKET {
            $$ = new Block($2);
      }

statements: Stmt {
            Vector<Stmt> v = new Vector();
            v.add($1);
            $$ = v;
      }
      | statements Stmt {
            $1.insertElementAt($2, 0);
            $$ = $1;
      }

emptystatement: SEMICOLON {
      $$ = new EmptyStmt();
}
// ?

returnstatement:// RETURN SEMICOLON {
        //    $$ = new Return();
      //}
      //|
      RETURN Expr SEMICOLON {
            $$ = new Return($2);
      }

StmtExprStmt: StmtExpr {
      $$ = new StmtExprStmt($1); 
}

StmtExpr: Assign { $$ = $1; }
      | New { $$ = $1; }
      | MethodCall { $$ = $1; }

Assign: LocalOrFieldVar ASSIGN Expr {
      $$ = new Assign((LocalOrFieldVar) $1, $3);
}

New: NEW Type OPENROUNDBRACKET expressions CLOSEROUNDBRACKET {
            $$ = new New($2, $4);
      }
      | NEW Type OPENROUNDBRACKET CLOSEROUNDBRACKET {
            $$ = new New($2, new Vector());
      }
// ?

MethodCall: Expr TEXT OPENROUNDBRACKET expressions CLOSEROUNDBRACKET {
            $$ = new MethodCall($1, $2, $4);
      }
      | Expr TEXT OPENROUNDBRACKET CLOSEROUNDBRACKET {
            $$ = new MethodCall($1, $2, new Vector());
      }

Expr: This { $$ = $1; }
      | Super { $$ = $1; }
      | LocalOrFieldVar { $$ = $1; }
      | InstVar { $$ = $1; }
      | Unary { $$ = $1; }
      | Binary { $$ = $1; }
      | Integer { $$ = $1; }
      | Bool { $$ = $1; }
      | Char { $$ = $1; }
      | String { $$ = $1; }
      | Jnull { $$ = $1; }
      | StmtExprExpr { $$ = $1; }
// THIS mit this.Expr?

This: THIS {
      $$ = new This();
}
// Super weglassen?

Super: SUPER {
      $$ = new Super();
}

LocalOrFieldVar: TEXT {
      $$ = new LocalOrFieldVar($1);
}

InstVar: Expr TEXT {
      $$ = new InstVar($1, $2);
}

Unary: UNARY Expr {
      $$ = new Unary($1, $2);
}

Binary: Expr BINARY Expr {
      $$ = new Binary($2, $1, $3);
}

// ?

Integer: INTEGER TEXT {
      $$ = new JInteger(1);
}

Bool: BOOL TEXT {
            $$ = new Bool(true);
      }

Char: CHAR TEXT {
      $$ = new Char('t');
}

String: STRING TEXT {
      $$ = new JString($2);
}

Jnull: JNULL {
      $$ = new Jnull();
}

StmtExprExpr: StmtExpr { 
      $$ = new StmtExprExpr($1);
}

expressions: Expr { 
            Vector<Expr> v = new Vector();
            v.add($1);
            $$ = v;
      }
      | Expr COMMA expressions {
            $3.insertElementAt($1, 0);
            $$ = $3;
      }

Type: TEXT {
      System.out.println("Test: " + $1);
      $$ = new Type($1); }
    //  | CHAR { $$ = new Type($1); }
    //  | BOOL { $$ = new Type($1); }
     | INTEGER { $$ = new Type("int"); }
     | VOID { $$ = new Type("void"); }
     | STRING { $$ = new Type("String"); }
%%
}